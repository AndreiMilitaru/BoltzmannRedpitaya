'''
@ author: Andrei Militaru
@ date: 21st of May 2019
'''

import sys

'''
-------------------------------------------
User defined values:
'''
# number of inputs of each of the signals that need to be multiplexed
input_bits = 16

# number of signals that need to be multiplexed
delay_channels = 8

# path where to save the output file
path = '../vhdl/'

# name of the module
module_name = 'shift_register_' + str(delay_channels) + 'delays'

# extention of the file
hdl = '.v'

# link on gitlab of the current script
current_dir = 'https://git.ee.ethz.ch/andreimi/boltzmann_redpitaya/tree/master/python_scripts/'
'''
------------------------------------------
'''
with open(path + module_name + hdl,'w') as script:
    # information about the script
    script.write('/////////////////////////////////////////////////////////\n')
    script.write('// author: Andrei Militaru \n')
    script.write('// date: 21st of May 2019 \n')
    script.write('// Script automatically generated by ' + current_dir + sys.argv[0] + '\n')
    script.write('/////////////////////////////////////////////////////////\n')
    
    # module declaration
    script.write('module ' + module_name + ' (\n')
    script.write('\tinput wire [' + str(input_bits-1) + ':0] data_i,\n')
    script.write('\tinput wire clk_i,\n')
    script.write('\tinput wire rst_i,\n')
    for i in range(delay_channels):
        script.write('\toutput wire [' + str(input_bits-1) + ':0] data' + str(i) + '_o')
        ending = ',\n' if i != (delay_channels-1) else '\n'
        script.write(ending)
    script.write('\t);\n\n')
    
    # declaration of internal variables
    for i in range(delay_channels):
        script.write('\treg [' + str(input_bits-1) + ':0] data' + str(i) + '_q;\n')
        script.write('\tassign data' + str(i) + '_o = data' + str(i) + '_q;\n\n')
    
    # flip flop loop
    script.write('\talways @(posedge clk_i) begin\t\t// internal flip flop\n')
    script.write('\t\tif (rst_i) begin\n')
    for i in range(delay_channels):
        script.write('\t\t\tdata' + str(i) + '_q <= ' + str(input_bits) + '\'d0;\n')
    script.write('\t\tend else begin\n')
    script.write('\t\t\tdata0_q <= data_i;\n')
    for i in range(delay_channels-1):
        script.write('\t\t\tdata' + str(i+1) + '_q <= data' + str(i) + '_q;\n')
    script.write('\t\tend\n')
    script.write('\tend\n\n')
    script.write('endmodule\n')