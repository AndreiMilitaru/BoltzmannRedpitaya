'''
@ author: Andrei Militaru
@ date: 11th of April 2019
'''

import numpy as np
import sys

'''
-------------------------------------------
User defined values:
'''
# number of inputs of each of the signals that need to be multiplexed
input_bits = 16

# number of signals that need to be multiplexed
bit_channels = 8

# number of inputs necessary to select 
bit_select = int(np.ceil(np.log(bit_channels)/np.log(2)))

# path where to save the output file
path = '../vhdl/'

# name of the module
module_name = 'MUX_' + str(bit_select) + 'bits'

# extention of the file
hdl = '.v'

# link on gitlab of the current script
current_dir = 'https://git.ee.ethz.ch/andreimi/boltzmann_redpitaya/tree/master/python_scripts/'
'''
------------------------------------------
'''
with open(path + module_name + hdl,'w') as script:
    # information about the script
    script.write('/////////////////////////////////////////////////////////\n')
    script.write('// author: Andrei Militaru \n')
    script.write('// date: 11th of April 2019 \n')
    script.write('// Script automatically generated by ' + current_dir + sys.argv[0] + '\n')
    script.write('/////////////////////////////////////////////////////////\n')
    
    # module declaration
    script.write('module ' + module_name + ' (\n')
    for i in range(bit_channels):
        script.write('\tinput wire [' + str(input_bits-1) + ':0] data' + str(i) + '_i,\n')
    script.write('\tinput wire [' + str(bit_select-1) + ':0] sel_i,\n')
    script.write('\tinput wire clk_i,\n')
    script.write('\tinput wire rst_i,\n')
    script.write('\toutput wire [' + str(input_bits-1) + ':0] data_o\n')
    script.write('\t);\n\n')
    
    # declaration of internal variables
    script.write('\treg [' + str(input_bits-1) + ':0] data_q;\n')
    script.write('\tassign data_o = data_q;\n\n')
    
    # flip flop loop
    script.write('\talways @(posedge clk_i) begin\t\t// internal flip flop\n')
    script.write('\t\tif (rst_i) begin\n')
    script.write('\t\t\tdata_q <= ' + str(input_bits) + '\'d0;\n')
    script.write('\t\tend else begin\n')
    script.write('\t\t\tcase(sel_i)\n')
    indentation = '\t\t\t\t'
    for i in range(bit_channels):
        to_script = indentation + str(bit_select) + '\'d' + str(i) + (
                    ': ' + 'data_q <= data' + str(i) + '_i;\n')
        script.write(to_script)
    script.write('\t\t\t\tdefault: ' + 'data_q = ' + str(input_bits) + '\'d0;\n')
    script.write('\t\t\tendcase\n')
    script.write('\t\tend\n')
    script.write('\tend\n\n')
    script.write('endmodule\n')
