'''
@ author: Andrei Militaru
@ date: 21st of May 2019
'''

import sys
import numpy as np

'''
-------------------------------------------
User defined values:
'''
# number of inputs of each of the signals that need to be multiplexed
input_bits = int(sys.argv[1])

# number of signals that need to be multiplexed
delay_channels = int(sys.argv[2])

# number of inputs necessary to select 
bit_select = int(np.ceil(np.log(delay_channels)/np.log(2)))

# path where to save the output file
path = '../vhdl/'

# name of the module
module_name = 'delay_max' + str(delay_channels) + 'clocks'

# extention of the file
hdl = '.v'

# link on gitlab of the current script
current_dir = 'https://git.ee.ethz.ch/andreimi/boltzmann_redpitaya/tree/master/python_scripts/'

shift_module_name = 'shift_register_' + str(delay_channels) + 'delays'
mux_module_name = 'MUX_' + str(bit_select) + 'bits'

'''
------------------------------------------
'''
with open(path + module_name + hdl,'w') as script:
    # information about the script
    script.write('/////////////////////////////////////////////////////////\n')
    script.write('// author: Andrei Militaru \n')
    script.write('// date: 21st of May 2019 \n')
    script.write('// Script automatically generated by ' + current_dir + sys.argv[0] + '\n')
    script.write('/////////////////////////////////////////////////////////\n\n')
    
    # module declaration
    script.write('module ' + module_name + ' (\n')
    script.write('\tinput wire [' + str(input_bits-1) + ':0] data_i,\n')
    script.write('\tinput wire [' + str(bit_select-1) + ':0] sel_i,\n')
    script.write('\tinput wire clk_i,\n')
    script.write('\tinput wire rst_i,\n')
    script.write('\tinput wire [' + str(input_bits-1) + ':0] data_o,\n')
    script.write('\t);\n\n')
    
    # declaration of internal variables
    for i in range(delay_channels):
        script.write('\twire [' + str(input_bits-1) + ':0] data' + str(i) + ';\n')
    script.write('\n')
    
    # declaration of chained_shift registers module
    script.write('\t' + shift_module_name + ' ' + shift_module_name + '_i (\n')
    indent = '\t\t\t\t'
    script.write(indent + '.clk_i(clk_i),\n')
    script.write(indent + '.rst_i(rst_i),\n')
    script.write(indent + '.data_i(data_i),\n')
    for i in range(delay_channels):
        script.write(indent + '.data' + str(i) + '_o(data' + str(i) + ')')
        last_character = '' if i == (delay_channels - 1) else ','
        script.write(last_character + '\n')
    script.write('\t);\n\n')
    
    # declaration of multiplexer
    script.write('\t' + mux_module_name + ' ' + mux_module_name + '_i (\n')
    script.write(indent + '.clk_i(clk_i),\n')
    script.write(indent + '.rst_i(rst_i),\n')
    script.write(indent + '.sel_i(sel_i),\n')
    for i in range(delay_channels):
        script.write(indent + '.data' + str(i) + '_i(data' + str(i) + '),\n')
    script.write(indent + '.data_o(data_o)\n')
    script.write('\t);\n\n')
    
    script.write('endmodule\n')